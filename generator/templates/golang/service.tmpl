type {{upperFirst .ServiceName}} interface {
{{- range .Query.Resolvers}}
	{{upperFirst .Name}}(ctx context.Context{{if .Argument}}, in *{{.Argument.Type}}{{end}}) (*{{.Type}}, error)
{{- end}}
}

type {{upperFirst .ServiceName}}Client struct {
	cc    client.Client
	appID string
}

func New{{upperFirst .ServiceName}}Client(appID string) (*{{upperFirst .ServiceName}}Client, error) {
	cc, err := client.NewClient()
	if err != nil {
		return nil, err
	}
	return &{{upperFirst .ServiceName}}Client{cc, appID}, nil
}

{{ range .Query.Resolvers }}
func (c *{{upperFirst $.ServiceName}}Client) {{upperFirst .Name}}(ctx context.Context{{if .Argument}}, in *{{.Argument.Type}}{{end}}) (*{{.Type}}, error) {
    {{- if .Argument}}
    data, err := json.Marshal(in)
    if err != nil {
      return nil, err
    }
    {{- end}}
	content := &client.DataContent{ContentType: "application/json"{{if .Argument}}, Data: data{{end}}}
	resp, err := c.cc.InvokeMethodWithContent(ctx, c.appID, "{{.Name}}", "post", content)
	if err != nil {
		return nil, err
	}
	out := new({{.Type}})
	err = json.Unmarshal(resp, out)
	if err != nil {
      return nil, err
	}
	return out, nil
}
{{end}}

type InvocationHandlerFunc func(ctx context.Context, in *common.InvocationEvent) (out *common.Content, err error)

{{range .Query.Resolvers}}
func _{{upperFirst $.ServiceName}}_{{upperFirst .Name}}_Handler(srv {{upperFirst $.ServiceName}}) InvocationHandlerFunc {
	return func(ctx context.Context, in *common.InvocationEvent) (out *common.Content, err error) {
		{{- if .Argument}}
		req := new({{.Argument.Type}})
		reqErr := json.Unmarshal(in.Data, req)
		if reqErr != nil {
			err = reqErr
			return
		}
		{{- end}}
		resp, mErr := srv.{{upperFirst .Name}}(ctx{{if .Argument}}, req{{end}})
		if mErr != nil {
			err = mErr
			return
		}
		data, encErr := json.Marshal(resp)
		if encErr != nil {
			err = encErr
			return
		}
		out = &common.Content{
			ContentType: "application/json",
			Data:        data,
		}
		return
	}
}
{{end}}

func Register(s common.Service, srv {{upperFirst $.ServiceName}}) {
{{- range .Query.Resolvers}}
	s.AddServiceInvocationHandler("{{.Name}}", _{{upperFirst $.ServiceName}}_{{upperFirst .Name}}_Handler(srv))
{{- end}}
}

func New{{upperFirst $.ServiceName}}Server(address string, srv {{upperFirst $.ServiceName}}) (common.Service, error) {
	s, err := grpc.NewService(address)
	if err != nil {
		return nil, err
	}
	Register(s, srv)

	return s, nil
}
